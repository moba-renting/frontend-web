-- =================================================================
-- SECCIÓN 1: PERFILES DE USUARIO
-- =================================================================

CREATE TABLE profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT NOT NULL,
    avatar_url TEXT
);


-- =================================================================
-- SECCIÓN 2: SISTEMA DE ROLES
-- =================================================================

CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

CREATE TABLE user_roles (
    user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);


-- =================================================================
-- SECCIÓN 3: AUTOMATIZACIÓN EN LA CREACIÓN DE USUARIOS
-- =================================================================

INSERT INTO roles (name, description) VALUES
('admin', 'Administrador con acceso total a la plataforma.'),
('customer', 'Cliente, rol por defecto para nuevos usuarios.'),
('dealership', 'Concesionario con acceso a funciones relacionadas a ventas de vehículos.'),
('insurance', 'Aseguradora con acceso a funciones relacionadas con pólizas y reclamos.');

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  v_default_role_id UUID;
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
  );

  SELECT id INTO v_default_role_id FROM public.roles WHERE name = 'customer';

  IF v_default_role_id IS NOT NULL THEN
    INSERT INTO public.user_roles (user_id, role_id)
    VALUES (new.id, v_default_role_id);
  END IF;
  
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- =================================================================
-- TABLA DE CONCESIONARIA
-- =================================================================
CREATE TABLE dealerships (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
    name TEXT UNIQUE NOT NULL,
    handle TEXT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ==============================
-- ENUMS
-- ==============================
CREATE TYPE condition_type AS ENUM ('New', 'Semi-New', 'Used');
CREATE TYPE fuel_type AS ENUM ('Gasoline', 'Diesel', 'Hybrid', 'Electric');
CREATE TYPE traction_type AS ENUM ('FWD', 'RWD', 'AWD', '4WD'); -- tracción
CREATE TYPE transmission_type AS ENUM ('Manual', 'Automatic', 'CVT', 'Semi-Automatic');

-- ==============================
-- TABLAS DE MARCAS, MODELOS Y CATEGORIAS
-- ==============================
CREATE TABLE brands (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

CREATE TABLE models (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    brand_id BIGINT NOT NULL REFERENCES brands(id) ON DELETE RESTRICT,
    name TEXT NOT NULL,
    sort_order BIGINT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false,
    UNIQUE (brand_id, name),
    UNIQUE (brand_id, sort_order)
);

CREATE TABLE categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    image_url TEXT NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

-- ==============================
-- TABLAS GPS Y COLORES
-- ==============================
CREATE TABLE gps (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL ,
    price NUMERIC NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

CREATE TABLE colors (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL ,
    hex_code TEXT UNIQUE NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

-- ==============================
-- TABLA PRINCIPAL DE AUTOS
-- ==============================
CREATE TABLE vehicles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dealership_id BIGINT NOT NULL REFERENCES dealerships(id) ON DELETE RESTRICT,
    model_id BIGINT NOT NULL REFERENCES models(id) ON DELETE RESTRICT,
    gps_id BIGINT NOT NULL REFERENCES gps(id) ON DELETE RESTRICT,
    color_id BIGINT NOT NULL REFERENCES colors(id) ON DELETE RESTRICT,
    category_id BIGINT NOT NULL REFERENCES categories(id) ON DELETE RESTRICT,
    vehicle_price NUMERIC NOT NULL,
    maintenance_price NUMERIC NOT NULL,
    soat_price NUMERIC NOT NULL,
    auto_parts_price NUMERIC NOT NULL,
    insurance_price NUMERIC NOT NULL,
    image_urls TEXT[] NOT NULL,
    mileage INTEGER NOT NULL CHECK (mileage >= 0),
    year SMALLINT NOT NULL CHECK (year >= 1900 AND year <= EXTRACT(YEAR FROM CURRENT_DATE) + 1),
    fuel fuel_type NOT NULL,
    edition TEXT NOT NULL,
    traction traction_type NOT NULL,
    condition condition_type NOT NULL,
    transmission transmission_type NOT NULL,
    dealership_authorization BOOLEAN NOT NULL DEFAULT false,
    insurance_authorization BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ==============================
-- TABLA DE CONFIGURACIÓN PARA EL HOME PAGE
-- ==============================

CREATE TABLE home_page_config (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hero_banner_urls TEXT[] NOT NULL,
    b2b_benefits_url TEXT NOT NULL,
    b2c_benefits_url TEXT NOT NULL,
    faqs JSONB NOT NULL,
    CONSTRAINT singleton_check CHECK (id = 1)
);

-- ==============================
-- INSERTAR DATOS DE EJEMPLO
-- ==============================

INSERT INTO home_page_config (id, hero_banner_url, b2b_benefits_url, b2c_benefits_url, faqs)
VALUES (
    1,
    ARRAY['https://placehold.co/1920x1080/000000/FFFFFF?text=Hero+Banner'],
    'https://placehold.co/800x600/CCCCCC/000000?text=Beneficios+B2B',
    'https://placehold.co/800x600/EEEEEE/000000?text=Beneficios+B2C',
    '[
        {
            "question": "¿Qué tipo de financiamiento ofrecen?",
            "answer": "Ofrecemos múltiples opciones de financiamiento que se adaptan a tus necesidades. Puedes consultar más detalles en nuestra sección de financiamiento o contactando a un asesor."
        },
        {
            "question": "¿Puedo entregar mi auto actual como parte de pago?",
            "answer": "¡Claro que sí! Aceptamos vehículos como parte del pago. Realizaremos una evaluación justa y transparente de tu auto para ofrecerte el mejor valor posible."
        },
        {
            "question": "¿Todos los vehículos tienen garantía?",
            "answer": "Sí, todos nuestros vehículos, tanto nuevos como seminuevos, vienen con una garantía completa para tu tranquilidad. Los términos y la duración pueden variar según el modelo y la condición."
        }
    ]'::jsonb
);

-- ==============================
-- FUNCIONES PARA LISTADO DE VEHICULOS
-- ==============================

CREATE OR REPLACE FUNCTION get_vehicles_by_filters(
    p_brand_id BIGINT DEFAULT NULL,
    p_model_id BIGINT DEFAULT NULL,
    p_category_id BIGINT DEFAULT NULL,
    p_condition condition_type DEFAULT NULL,
    p_dealership_id BIGINT DEFAULT NULL,
    p_year_min SMALLINT DEFAULT NULL,
    p_year_max SMALLINT DEFAULT NULL,
    p_mileage_min INTEGER DEFAULT NULL,
    p_mileage_max INTEGER DEFAULT NULL,
    p_transmission transmission_type DEFAULT NULL,
    p_traction traction_type DEFAULT NULL,
    p_page_size INT DEFAULT 20, -- Parámetro para el tamaño de página
    p_offset INT DEFAULT 0      -- Parámetro para el desplazamiento (offset)
)
RETURNS jsonb AS $$
DECLARE
    result_json jsonb;
BEGIN
    -- Validación
    IF p_brand_id IS NOT NULL AND p_model_id IS NOT NULL THEN
        RAISE EXCEPTION 'Puedes filtrar por marca o por modelo, pero no por ambos a la vez.';
    END IF;

    WITH filtered_vehicles AS (
        -- Este CTE obtiene TODOS los vehículos que coinciden con los filtros, sin paginar.
        SELECT
            v.id,
            b.name as brand_name,
            m.name as model_name,
            v.year,
            v.image_urls,
            v.fuel,
            v.transmission,
            v.mileage,
            v.vehicle_price
        FROM vehicles v
        JOIN models m ON v.model_id = m.id
        JOIN brands b ON m.brand_id = b.id
        WHERE
            v.dealership_authorization = true AND v.insurance_authorization = true
            AND (p_brand_id IS NULL OR b.id = p_brand_id)
            AND (p_model_id IS NULL OR m.id = p_model_id)
            AND (p_category_id IS NULL OR v.category_id = p_category_id)
            AND (p_condition IS NULL OR v.condition = p_condition)
            AND (p_dealership_id IS NULL OR v.dealership_id = p_dealership_id)
            AND (p_year_min IS NULL OR v.year >= p_year_min)
            AND (p_year_max IS NULL OR v.year <= p_year_max)
            AND (p_mileage_min IS NULL OR v.mileage >= p_mileage_min)
            AND (p_mileage_max IS NULL OR v.mileage <= p_mileage_max)
            AND (p_transmission IS NULL OR v.transmission = p_transmission)
            AND (p_traction IS NULL OR v.traction = p_traction)
    )
    -- Construimos el JSON final combinando los vehículos paginados y el conteo total.
    SELECT jsonb_build_object(
        'total_count', (SELECT COUNT(*) FROM filtered_vehicles),
        'vehicles', COALESCE((
            SELECT jsonb_agg(
                jsonb_build_object(
                    'id', fv.id,
                    'nombre', fv.brand_name || ' ' || fv.model_name || ' ' || fv.year,
                    'image_urls', fv.image_urls,
                    'combustible', fv.fuel,
                    'transmision', fv.transmission,
                    'kilometraje', fv.mileage,
                    'precio', fv.vehicle_price
                )
            )
            FROM (
                -- Aplicamos orden, límite y offset al conjunto de vehículos ya filtrado.
                SELECT * FROM filtered_vehicles
                ORDER BY id
                LIMIT p_page_size
                OFFSET p_offset
            ) fv
        ), '[]'::jsonb)
    )
    INTO result_json;

    RETURN result_json;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_available_filters(
    p_brand_id BIGINT DEFAULT NULL,
    p_model_id BIGINT DEFAULT NULL,
    p_category_id BIGINT DEFAULT NULL,
    p_condition condition_type DEFAULT NULL,
    p_dealership_id BIGINT DEFAULT NULL,
    p_year_min SMALLINT DEFAULT NULL,
    p_year_max SMALLINT DEFAULT NULL,
    p_mileage_min INTEGER DEFAULT NULL,
    p_mileage_max INTEGER DEFAULT NULL,
    p_transmission transmission_type DEFAULT NULL,
    p_traction traction_type DEFAULT NULL
)
RETURNS jsonb AS $$
BEGIN
    -- Validación: Asegurarse de que no se provean p_brand_id y p_model_id al mismo tiempo.
    IF p_brand_id IS NOT NULL AND p_model_id IS NOT NULL THEN
        RAISE EXCEPTION 'Puedes filtrar por marca o por modelo, pero no por ambos a la vez.';
    END IF;

    RETURN (
        WITH
        -- 1. CTE Base: Aplica todos los filtros de entrada para obtener nuestro universo de vehículos relevantes.
        base_vehicles AS (
            SELECT
                v.mileage, v.year, v.condition, v.transmission, v.traction,
                b.id as brand_id, b.name as brand_name,
                m.id as model_id, m.name as model_name,
                c.id as category_id, c.name as category_name,
                d.id as dealership_id, d.name as dealership_name
            FROM vehicles AS v
            JOIN models AS m ON v.model_id = m.id
            JOIN brands AS b ON m.brand_id = b.id
            JOIN categories AS c ON v.category_id = c.id
            JOIN dealerships AS d ON v.dealership_id = d.id
            WHERE
                v.dealership_authorization = true AND v.insurance_authorization = true
                AND (p_brand_id IS NULL OR b.id = p_brand_id)
                AND (p_model_id IS NULL OR m.id = p_model_id)
                AND (p_category_id IS NULL OR c.id = p_category_id)
                AND (p_condition IS NULL OR v.condition = p_condition)
                AND (p_dealership_id IS NULL OR d.id = p_dealership_id)
                AND (p_year_min IS NULL OR v.year >= p_year_min)
                AND (p_year_max IS NULL OR v.year <= p_year_max)
                AND (p_mileage_min IS NULL OR v.mileage >= p_mileage_min)
                AND (p_mileage_max IS NULL OR v.mileage <= p_mileage_max)
                AND (p_transmission IS NULL OR v.transmission = p_transmission)
                AND (p_traction IS NULL OR v.traction = p_traction)
        ),
        -- 2. CTEs para CADA filtro disponible
        available_brands AS (
          SELECT jsonb_agg(jsonb_build_object('id', brand_id, 'name', brand_name, 'count', count)) as data
          FROM (SELECT brand_id, brand_name, COUNT(*) as count FROM base_vehicles GROUP BY brand_id, brand_name) s
          WHERE p_brand_id IS NULL AND p_model_id IS NULL
        ),
        available_models AS (
          SELECT jsonb_agg(jsonb_build_object('id', model_id, 'name', model_name, 'count', count)) as data
          FROM (SELECT model_id, model_name, COUNT(*) as count FROM base_vehicles GROUP BY model_id, model_name) s
          WHERE p_brand_id IS NOT NULL AND p_model_id IS NULL
        ),
        available_categories AS (
          SELECT jsonb_agg(jsonb_build_object('id', category_id, 'name', category_name, 'count', count)) as data
          FROM (SELECT category_id, category_name, COUNT(*) as count FROM base_vehicles GROUP BY category_id, category_name) s
          WHERE p_category_id IS NULL
        ),
        available_dealerships AS (
          SELECT jsonb_agg(jsonb_build_object('id', dealership_id, 'name', dealership_name, 'count', count)) as data
          FROM (SELECT dealership_id, dealership_name, COUNT(*) as count FROM base_vehicles GROUP BY dealership_id, dealership_name) s
          WHERE p_dealership_id IS NULL
        ),
        available_conditions AS (
          SELECT jsonb_agg(jsonb_build_object('name', condition, 'count', count)) as data
          FROM (SELECT condition, COUNT(*) as count FROM base_vehicles GROUP BY condition) s
          WHERE p_condition IS NULL
        ),
        available_transmissions AS (
          SELECT jsonb_agg(jsonb_build_object('name', transmission, 'count', count)) as data
          FROM (SELECT transmission, COUNT(*) as count FROM base_vehicles GROUP BY transmission) s
          WHERE p_transmission IS NULL
        ),
        available_tractions AS (
          SELECT jsonb_agg(jsonb_build_object('name', traction, 'count', count)) as data
          FROM (SELECT traction, COUNT(*) as count FROM base_vehicles GROUP BY traction) s
          WHERE p_traction IS NULL
        ),
        year_ranges AS (
          SELECT jsonb_agg(jsonb_build_object('range', year_range, 'min', min_year, 'max', max_year, 'count', count) ORDER BY min_year DESC) as data
          FROM (
            SELECT year_range, MIN(year) as min_year, MAX(year) as max_year, COUNT(*) as count FROM (
              SELECT *, CASE
                  WHEN year >= 2018 THEN '2018 a más' WHEN year BETWEEN 2012 AND 2017 THEN '2012 a 2017'
                  WHEN year BETWEEN 2006 AND 2011 THEN '2006 a 2011' WHEN year BETWEEN 2000 AND 2005 THEN '2000 a 2005'
                  ELSE 'Hasta 1999' END as year_range
              FROM base_vehicles
            ) s GROUP BY year_range
          ) s WHERE p_year_min IS NULL AND p_year_max IS NULL
        ),
        mileage_ranges AS (
          SELECT jsonb_agg(jsonb_build_object('range', mileage_range, 'min', min_km, 'max', max_km, 'count', count) ORDER BY min_km ASC) as data
          FROM (
            SELECT mileage_range, MIN(mileage) as min_km, MAX(mileage) as max_km, COUNT(*) as count FROM (
              SELECT *, CASE
                  WHEN mileage <= 15000 THEN 'Hasta 15,000 Kms' WHEN mileage BETWEEN 15001 AND 30000 THEN '15,000 a 30,000 Kms'
                  WHEN mileage BETWEEN 30001 AND 50000 THEN '30,000 a 50,000 Kms' WHEN mileage BETWEEN 50001 AND 100000 THEN '50,000 a 100,000 Kms'
                  ELSE '100,000 Kms a más' END as mileage_range
              FROM base_vehicles
            ) s GROUP BY mileage_range
          ) s WHERE p_mileage_min IS NULL AND p_mileage_max IS NULL
        )
        -- 3. Construcción del JSON final.
        SELECT jsonb_strip_nulls(jsonb_build_object(
            'brands', (SELECT data FROM available_brands),
            'models', (SELECT data FROM available_models),
            'categories', (SELECT data FROM available_categories),
            'dealerships', (SELECT data FROM available_dealerships),
            'conditions', (SELECT data FROM available_conditions),
            'transmissions', (SELECT data FROM available_transmissions),
            'tractions', (SELECT data FROM available_tractions),
            'year_ranges', (SELECT data FROM year_ranges),
            'mileage_ranges', (SELECT data FROM mileage_ranges)
        ))
    );
END;
$$ LANGUAGE plpgsql;