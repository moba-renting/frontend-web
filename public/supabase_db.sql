-- =================================================================
-- SECCIÓN 1: PERFILES DE USUARIO
-- =================================================================

CREATE TABLE profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT NOT NULL,
    avatar_url TEXT
);


-- =================================================================
-- SECCIÓN 2: SISTEMA DE ROLES
-- =================================================================

CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

CREATE TABLE user_roles (
    user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);


-- =================================================================
-- SECCIÓN 3: AUTOMATIZACIÓN EN LA CREACIÓN DE USUARIOS
-- =================================================================

INSERT INTO roles (name, description) VALUES
('admin', 'Administrador con acceso total a la plataforma.'),
('customer', 'Cliente, rol por defecto para nuevos usuarios.'),
('dealership', 'Concesionario con acceso a funciones relacionadas a ventas de vehículos.'),
('insurance', 'Aseguradora con acceso a funciones relacionadas con pólizas y reclamos.');

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  v_default_role_id UUID;
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
  );

  SELECT id INTO v_default_role_id FROM public.roles WHERE name = 'customer';

  IF v_default_role_id IS NOT NULL THEN
    INSERT INTO public.user_roles (user_id, role_id)
    VALUES (new.id, v_default_role_id);
  END IF;
  
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- =================================================================
-- TABLA DE CONCESIONARIA
-- =================================================================
CREATE TABLE dealerships (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
    name TEXT UNIQUE NOT NULL,
    handle TEXT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE OR REPLACE FUNCTION public.handle_deleted_user()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE public.dealerships
  SET is_active = false
  WHERE owner_id = OLD.id;
  
  RETURN OLD;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_dealership_deleted
  BEFORE DELETE ON public.profiles
  FOR EACH ROW EXECUTE PROCEDURE public.handle_deleted_user();

-- ==============================
-- ENUMS
-- ==============================
CREATE TYPE fuel_type AS ENUM ('Gasoline', 'Diesel', 'Hybrid', 'Electric');
CREATE TYPE traction_type AS ENUM ('FWD', 'RWD', 'AWD', '4WD'); -- tracción
CREATE TYPE transmission_type AS ENUM ('Manual', 'Automatic', 'CVT', 'Semi-Automatic');


-- ==============================
-- TABLAS DE MARCAS, MODELOS Y CATEGORIAS
-- ==============================
CREATE TABLE brands (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

CREATE TABLE models (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    brand_id BIGINT NOT NULL REFERENCES brands(id) ON DELETE RESTRICT,
    name TEXT NOT NULL,
    sort_order BIGINT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false,
    UNIQUE (brand_id, name),
    UNIQUE (brand_id, sort_order)
);

CREATE TABLE categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    parent_id BIGINT REFERENCES categories(id) ON DELETE RESTRICT,
    name TEXT NOT NULL,
    image_url TEXT NOT NULL,
    sort_order BIGINT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false,
    UNIQUE (parent_id, name),
    UNIQUE (parent_id, sort_order)
);

CREATE UNIQUE INDEX ON categories (name) WHERE parent_id IS NULL;
CREATE UNIQUE INDEX ON categories (sort_order) WHERE parent_id IS NULL;

-- ==============================
-- TABLAS GPS Y COLORES
-- ==============================
CREATE TABLE gps (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL ,
    price NUMERIC NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

CREATE TABLE colors (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL ,
    hex_code TEXT UNIQUE NOT NULL,
    sort_order BIGINT UNIQUE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false
);

CREATE TABLE vehicle_colors (
    color_id BIGINT NOT NULL REFERENCES colors(id) ON DELETE CASCADE,
    vehicle_id BIGINT NOT NULL REFERENCES vehicles(id) ON DELETE CASCADE,
    stock_quantity INT NOT NULL DEFAULT 0 CHECK (stock_quantity >= 0),
    PRIMARY KEY (color_id, vehicle_id)
);

-- ==============================
-- TABLA PRINCIPAL DE AUTOS
-- ==============================
CREATE TABLE vehicles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dealership_id BIGINT NOT NULL REFERENCES dealerships(id) ON DELETE RESTRICT,
    model_id BIGINT NOT NULL REFERENCES models(id) ON DELETE RESTRICT,
    gps_id BIGINT NOT NULL REFERENCES gps(id) ON DELETE RESTRICT,
    category_id BIGINT NOT NULL REFERENCES categories(id) ON DELETE RESTRICT,

    vehicle_price NUMERIC NOT NULL,
    annual_insurance_price NUMERIC,
    low_mileage_rate_per_km NUMERIC,
    medium_mileage_rate_per_km NUMERIC,
    high_mileage_rate_per_km NUMERIC,

    image_urls TEXT[] NOT NULL,
    year INT NOT NULL CHECK (year >= 1900 AND year <= EXTRACT(YEAR FROM CURRENT_DATE) + 1),
    fuel fuel_type NOT NULL,
    edition TEXT NOT NULL,
    traction traction_type NOT NULL,
    transmission transmission_type NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ==============================
-- TABLA DE CONFIGURACIÓN PARA EL HOME PAGE
-- ==============================

CREATE TABLE home_page_config (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hero_banner_urls TEXT[] NOT NULL,
    b2b_benefits_url TEXT NOT NULL,
    b2c_benefits_url TEXT NOT NULL,
    faqs JSONB NOT NULL,
    CONSTRAINT singleton_check CHECK (id = 1)
);

-- ==============================
-- INSERTAR DATOS DE EJEMPLO
-- ==============================

INSERT INTO home_page_config (id, hero_banner_url, b2b_benefits_url, b2c_benefits_url, faqs)
VALUES (
    1,
    ARRAY['https://placehold.co/1920x1080/000000/FFFFFF?text=Hero+Banner'],
    'https://placehold.co/800x600/CCCCCC/000000?text=Beneficios+B2B',
    'https://placehold.co/800x600/EEEEEE/000000?text=Beneficios+B2C',
    '[
        {
            "question": "¿Qué tipo de financiamiento ofrecen?",
            "answer": "Ofrecemos múltiples opciones de financiamiento que se adaptan a tus necesidades. Puedes consultar más detalles en nuestra sección de financiamiento o contactando a un asesor."
        },
        {
            "question": "¿Puedo entregar mi auto actual como parte de pago?",
            "answer": "¡Claro que sí! Aceptamos vehículos como parte del pago. Realizaremos una evaluación justa y transparente de tu auto para ofrecerte el mejor valor posible."
        },
        {
            "question": "¿Todos los vehículos tienen garantía?",
            "answer": "Sí, todos nuestros vehículos, tanto nuevos como seminuevos, vienen con una garantía completa para tu tranquilidad. Los términos y la duración pueden variar según el modelo y la condición."
        }
    ]'::jsonb
);

-- ======================================
-- FUNCIONES PARA LISTADO DE VEHICULOS V3
-- ======================================
CREATE OR REPLACE FUNCTION get_vehicles_by_filters(
    p_brand_id BIGINT,
    p_model_id BIGINT,
    p_category_id BIGINT,
    p_fuel fuel_type,
    p_dealership_id BIGINT,
    p_year_min SMALLINT,
    p_year_max SMALLINT,
    p_transmission transmission_type,
    p_traction traction_type,
    p_page_size INT,
    p_offset INT,
    p_years INT,
    p_km_per_year INT,
    p_client_type customer_type,
    p_driver_score driver_score
)
RETURNS jsonb AS $$
DECLARE
    result_json jsonb;
BEGIN
    WITH filtered_vehicles AS (
        SELECT
            v.*,
            b.name as brand_name,
            m.name as model_name
        FROM vehicles v
        JOIN models m ON v.model_id = m.id
        JOIN brands b ON m.brand_id = b.id
        -- ... resto de JOINs ...
        JOIN categories c ON v.category_id = c.id
        JOIN dealerships d ON v.dealership_id = d.id
        JOIN gps g ON v.gps_id = g.id
        JOIN (
            SELECT vc.vehicle_id FROM vehicle_colors vc
            JOIN colors col ON vc.color_id = col.id
            WHERE col.is_active = true
            GROUP BY vc.vehicle_id
            HAVING SUM(vc.stock_quantity) > 0
        ) AS available_stock ON v.id = available_stock.vehicle_id
        WHERE
            -- ... todas las condiciones WHERE ...
            v.is_active = true
            AND d.is_active = true
            AND b.is_active = true
            AND m.is_active = true
            AND c.is_active = true
            AND g.is_active = true
            AND (p_brand_id IS NULL OR b.id = p_brand_id)
            AND (p_model_id IS NULL OR m.id = p_model_id)
            AND (p_category_id IS NULL OR v.category_id IN (
                SELECT id FROM categories WHERE id = p_category_id OR parent_id = p_category_id
            ))
            AND (p_fuel IS NULL OR v.fuel = p_fuel)
            AND (p_dealership_id IS NULL OR v.dealership_id = p_dealership_id)
            AND (p_year_min IS NULL OR v.year >= p_year_min)
            AND (p_year_max IS NULL OR v.year <= p_year_max)
            AND (p_transmission IS NULL OR v.transmission = p_transmission)
            AND (p_traction IS NULL OR v.traction = p_traction)
    ),
    paginated_vehicles AS (
        SELECT * FROM filtered_vehicles
        ORDER BY id
        LIMIT p_page_size
        OFFSET p_offset
    )
    SELECT jsonb_build_object(
        'total_count', (SELECT COUNT(*) FROM filtered_vehicles),
        'vehicles', COALESCE((
            SELECT jsonb_agg(
                -- CAMBIO: La estructura del JSON final
                jsonb_build_object(
                    'id', pv.id,
                    'nombre', pv.brand_name || ' ' || pv.model_name || ' ' || pv.edition || ' ' || pv.year,
                    'image_urls', pv.image_urls,
                    'combustible', pv.fuel,
                    'transmision', pv.transmission,
                    'precio', pv.vehicle_price,
                    'rental_simulation', sim_result.data
                )
            )
            FROM paginated_vehicles pv
            -- CAMBIO: La llamada a la función ahora pasa los parámetros del vehículo
            CROSS JOIN LATERAL
                simulate_vehicle_rental(
                    pv.vehicle_price,
                    pv.annual_insurance_price,
                    pv.low_mileage_rate_per_km,
                    pv.medium_mileage_rate_per_km,
                    pv.high_mileage_rate_per_km,
                    p_years,
                    p_km_per_year,
                    p_client_type,
                    p_driver_score
                ) AS sim_result(data)

        ), '[]'::jsonb)
    )
    INTO result_json;

    RETURN result_json;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_available_filters(
    p_brand_id BIGINT DEFAULT NULL,
    p_model_id BIGINT DEFAULT NULL,
    p_category_id BIGINT DEFAULT NULL,
    p_fuel fuel_type DEFAULT NULL,
    p_dealership_id BIGINT DEFAULT NULL,
    p_year_min SMALLINT DEFAULT NULL,
    p_year_max SMALLINT DEFAULT NULL,
    p_transmission transmission_type DEFAULT NULL,
    p_traction traction_type DEFAULT NULL
)
RETURNS jsonb AS $$
BEGIN
    RETURN (
        WITH
        base_vehicles AS (
            SELECT
                v.year, v.fuel, v.transmission, v.traction,
                b.id as brand_id, b.name as brand_name,
                m.id as model_id, m.name as model_name,
                c.id as category_id, c.name as category_name, 
                c.parent_id as category_parent_id,
                c.sort_order as category_sort_order,
                d.id as dealership_id, d.name as dealership_name
            FROM vehicles AS v
            JOIN models AS m ON v.model_id = m.id
            JOIN brands AS b ON m.brand_id = b.id
            JOIN categories AS c ON v.category_id = c.id
            JOIN dealerships AS d ON v.dealership_id = d.id
            JOIN gps AS g ON v.gps_id = g.id
            JOIN (
                SELECT vc.vehicle_id
                FROM vehicle_colors vc
                JOIN colors col ON vc.color_id = col.id
                WHERE col.is_active = true
                GROUP BY vc.vehicle_id
                HAVING SUM(vc.stock_quantity) > 0
            ) AS available_stock ON v.id = available_stock.vehicle_id
            WHERE
                v.is_active = true
                AND d.is_active = true
                AND b.is_active = true
                AND m.is_active = true
                AND c.is_active = true
                AND g.is_active = true
                AND (p_brand_id IS NULL OR b.id = p_brand_id)
                AND (p_model_id IS NULL OR m.id = p_model_id)
                AND (p_category_id IS NULL OR v.category_id IN (
                    SELECT id FROM categories WHERE id = p_category_id OR parent_id = p_category_id
                ))
                AND (p_fuel IS NULL OR v.fuel = p_fuel)
                AND (p_dealership_id IS NULL OR d.id = p_dealership_id)
                AND (p_year_min IS NULL OR v.year >= p_year_min)
                AND (p_year_max IS NULL OR v.year <= p_year_max)
                AND (p_transmission IS NULL OR v.transmission = p_transmission)
                AND (p_traction IS NULL OR v.traction = p_traction)
        ),
        available_brands AS (
          SELECT jsonb_agg(jsonb_build_object('id', brand_id, 'name', brand_name, 'count', count)) as data
          FROM (SELECT brand_id, brand_name, COUNT(*) as count FROM base_vehicles GROUP BY brand_id, brand_name) s
          WHERE p_brand_id IS NULL AND p_model_id IS NULL
        ),
        available_models AS (
          SELECT jsonb_agg(jsonb_build_object('id', model_id, 'name', model_name, 'count', count)) as data
          FROM (SELECT model_id, model_name, COUNT(*) as count FROM base_vehicles GROUP BY model_id, model_name) s
          WHERE p_brand_id IS NOT NULL AND p_model_id IS NULL
        ),
        available_parent_categories AS (
            SELECT jsonb_agg(
                jsonb_build_object('id', category_id, 'name', category_name, 'count', count)
                ORDER BY category_sort_order
            ) as data
            FROM (
                SELECT category_id, category_name, category_sort_order, COUNT(*) as count
                FROM base_vehicles
                WHERE category_parent_id IS NULL
                GROUP BY category_id, category_name, category_sort_order
            ) s
            WHERE p_category_id IS NULL
        ),
        available_child_categories AS (
            SELECT jsonb_agg(
                jsonb_build_object('id', category_id, 'name', category_name, 'count', count)
                ORDER BY category_sort_order
            ) as data
            FROM (
                SELECT category_id, category_name, category_sort_order, COUNT(*) as count
                FROM base_vehicles
                WHERE category_parent_id = p_category_id
                GROUP BY category_id, category_name, category_sort_order
            ) s
            WHERE p_category_id IS NOT NULL AND EXISTS (SELECT 1 FROM categories WHERE id = p_category_id AND parent_id IS NULL)
        ),
        available_dealerships AS (
          SELECT jsonb_agg(jsonb_build_object('id', dealership_id, 'name', dealership_name, 'count', count)) as data
          FROM (SELECT dealership_id, dealership_name, COUNT(*) as count FROM base_vehicles GROUP BY dealership_id, dealership_name) s
          WHERE p_dealership_id IS NULL
        ),
        available_fuels AS (
          SELECT jsonb_agg(jsonb_build_object('name', fuel, 'count', count)) as data
          FROM (SELECT fuel, COUNT(*) as count FROM base_vehicles GROUP BY fuel) s
          WHERE p_fuel IS NULL
        ),
        available_transmissions AS (
          SELECT jsonb_agg(jsonb_build_object('name', transmission, 'count', count)) as data
          FROM (SELECT transmission, COUNT(*) as count FROM base_vehicles GROUP BY transmission) s
          WHERE p_transmission IS NULL
        ),
        available_tractions AS (
          SELECT jsonb_agg(jsonb_build_object('name', traction, 'count', count)) as data
          FROM (SELECT traction, COUNT(*) as count FROM base_vehicles GROUP BY traction) s
          WHERE p_traction IS NULL
        ),
        year_ranges AS (
          SELECT jsonb_agg(jsonb_build_object('range', year_range, 'min', min_year, 'max', max_year, 'count', count) ORDER BY min_year DESC) as data
          FROM (
            SELECT year_range, MIN(year) as min_year, MAX(year) as max_year, COUNT(*) as count FROM (
              SELECT *, CASE
                  WHEN year >= 2020 THEN '2020 a más'
                  WHEN year BETWEEN 2015 AND 2019 THEN '2015 a 2019'
                  WHEN year BETWEEN 2010 AND 2014 THEN '2010 a 2014'
                  ELSE 'Hasta 2009' END as year_range
              FROM base_vehicles
            ) s GROUP BY year_range
          ) s WHERE p_year_min IS NULL AND p_year_max IS NULL
        )
        SELECT jsonb_strip_nulls(jsonb_build_object(
            'brands', (SELECT data FROM available_brands),
            'models', (SELECT data FROM available_models),
            'categories', COALESCE(
                (SELECT data FROM available_child_categories),
                (SELECT data FROM available_parent_categories)
            ),
            'dealerships', (SELECT data FROM available_dealerships),
            'fuels', (SELECT data FROM available_fuels),
            'transmissions', (SELECT data FROM available_transmissions),
            'tractions', (SELECT data FROM available_tractions),
            'year_ranges', (SELECT data FROM year_ranges)
        ))
    );
END;
$$ LANGUAGE plpgsql;

-- ===================================================
-- VARIABLES DE ENTORNO Y MATRIZ DE MARGEN DE GANANCIA
-- ===================================================
CREATE TABLE environment_variables (
    id INT PRIMARY KEY DEFAULT 1,
    annual_vehicle_tax_pct NUMERIC NOT NULL,
    vehicle_age_threshold NUMERIC NOT NULL,

    rtv_trucks_and_buses NUMERIC NOT NULL,
    rtv_cars NUMERIC NOT NULL,
    rtv_motorcycles NUMERIC NOT NULL,

    soat_trucks_and_buses NUMERIC NOT NULL,
    soat_cars NUMERIC NOT NULL,
    soat_taxis NUMERIC NOT NULL,
    soat_motorcycles NUMERIC NOT NULL,

    two_year_devaluation_pct NUMERIC NOT NULL,
    three_years_devaluation_pct NUMERIC NOT NULL,
    four_years_devaluation_pct NUMERIC NOT NULL,
    five_years_devaluation_pct NUMERIC NOT NULL,

    financing_rate_pct NUMERIC NOT NULL,
    CONSTRAINT singleton_check CHECK (id = 1)
);

CREATE TYPE driver_score AS ENUM ('good', 'bad');
CREATE TYPE customer_type AS ENUM ('app_driver', 'mype', 'corporate');

CREATE TABLE profit_margin_matrix (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer customer_type NOT NULL,
    score driver_score NOT NULL,
    margin_pct NUMERIC(5,2) NOT NULL
);

INSERT INTO profit_margin_matrix (customer, score, margin_pct) VALUES
('app_driver', 'good', 12.00),
('app_driver', 'bad',  15.00),
('mype',       'good', 10.00),
('mype',       'bad',  12.00),
('corporate',  'good', 8.00),
('corporate',  'bad',  10.00);

-- ======================================
-- FUNCION PARA SIMULAR RENTA DE VEHICULOS
-- ======================================
CREATE OR REPLACE FUNCTION simulate_vehicle_rental(
    p_vehicle_price NUMERIC,
    p_annual_insurance_price NUMERIC,
    p_low_mileage_rate_per_km NUMERIC,
    p_medium_mileage_rate_per_km NUMERIC,
    p_high_mileage_rate_per_km NUMERIC,
    p_years INT,
    p_km_per_year INT,
    p_client_type customer_type,
    p_driver_score driver_score
) RETURNS JSONB AS $$
DECLARE
    e environment_variables%ROWTYPE;
    n_months INT := p_years * 12;

    -- cálculos
    devaluacion_pct NUMERIC;
    valor_residual NUMERIC;
    cuota_vehiculo NUMERIC;
    seguro_mensual NUMERIC;
    impuesto_mensual NUMERIC;
    rtv_mensual NUMERIC;
    soat_mensual NUMERIC;
    mantenimiento_total NUMERIC := 0;
    mantenimiento_mensual NUMERIC := 0;
    subtotal NUMERIC;
    ganancia NUMERIC;
    total_final NUMERIC;
    km_acumulado INT := 0;
    costo NUMERIC;
    margin_pct NUMERIC;
BEGIN
    -- 1. traer datos (solo de environment_variables)
    SELECT * INTO e FROM environment_variables WHERE id = 1;

    -- 2. devaluación según años
    devaluacion_pct := CASE p_years
        WHEN 2 THEN e.two_year_devaluation_pct
        WHEN 3 THEN e.three_years_devaluation_pct
        WHEN 4 THEN e.four_years_devaluation_pct
        WHEN 5 THEN e.five_years_devaluation_pct
        ELSE 0
    END;

    -- 3. valor residual
    valor_residual := p_vehicle_price * (1 - (devaluacion_pct / 100.0));

    -- 4. cuota vehículo (PMT)
    cuota_vehiculo := ( ( ((e.financing_rate_pct / 100.0) / 12) * valor_residual ) /
                        (1 - POWER(1 + ((e.financing_rate_pct / 100.0) / 12), -n_months)) );

    -- 5. seguro
    seguro_mensual := p_annual_insurance_price / 12;

    -- 6. impuesto vehicular
    impuesto_mensual := (p_vehicle_price * (e.annual_vehicle_tax_pct / 100.0))
                          * e.vehicle_age_threshold / n_months;

    -- 7. RTV
    rtv_mensual := e.rtv_cars * GREATEST(p_years - e.vehicle_age_threshold, 0) / n_months;

    -- 8. SOAT (asumimos siempre carros)
    soat_mensual := e.soat_cars / 12;

    -- 9. mantenimiento
    FOR i IN 1..p_years LOOP
        km_acumulado := i * p_km_per_year;
        IF km_acumulado <= 15000 THEN
            costo := p_km_per_year * p_low_mileage_rate_per_km;
        ELSIF km_acumulado <= 30000 THEN
            costo := p_km_per_year * p_medium_mileage_rate_per_km;
        ELSE
            costo := p_km_per_year * p_high_mileage_rate_per_km;
        END IF;
        mantenimiento_total := mantenimiento_total + costo;
    END LOOP;
    mantenimiento_mensual := mantenimiento_total / n_months;

    -- 10. subtotal
    subtotal := cuota_vehiculo + seguro_mensual + impuesto_mensual +
                rtv_mensual + soat_mensual + mantenimiento_mensual;

    -- 11. buscar margen
    SELECT margin_pct INTO margin_pct
    FROM profit_margin_matrix
    WHERE customer = p_client_type AND score = p_driver_score;

    ganancia := subtotal * (margin_pct / 100.0);

    -- 12. cuota final
    total_final := subtotal + ganancia;

    -- salida
    RETURN jsonb_build_object(
        'devaluacion_pct', devaluacion_pct,
        'valor_residual', valor_residual,
        'seguro_mensual', seguro_mensual,
        'impuesto_mensual', impuesto_mensual,
        'rtv_mensual', rtv_mensual,
        'soat_mensual', soat_mensual,
        'mantenimiento_mensual', mantenimiento_mensual,
        'subtotal_mensual', subtotal,
        'ganancia_mensual', ganancia,
        'cuota_final_mensual', total_final
    );
END;
$$ LANGUAGE plpgsql;

-- ======================================
-- TABLA PARA LOS DOCUMENTOS LEGALES
-- ======================================
create table site_content (
  id INT primary key default 1,
  terms_and_conditions TEXT,
  privacy_policy TEXT,
  constraint singleton_row check (id = 1)
);

-- ======================================
-- CRECION DE DATA DE PRUEBA PARA TERMINOS Y CONDICIONES
-- ======================================
UPDATE site_content
SET 
  terms_and_conditions = 
'# Términos y Condiciones de Renta de Autos
*Última actualización: 24 de agosto de 2025*
Bienvenido a nuestro servicio de renta de autos. Al utilizar nuestra plataforma y alquilar un vehículo, usted acepta los siguientes términos y condiciones. Es importante que los lea detenidamente.
---
## 1. Requisitos para el Conductor
Para poder alquilar uno de nuestros vehículos, el conductor debe cumplir con los siguientes requisitos:
1.  Tener una edad mínima de **21 años**.
2.  Presentar una licencia de conducir válida y vigente.
3.  Contar con una tarjeta de crédito a su nombre para el depósito de garantía.
## 2. Uso del Vehículo
El vehículo alquilado solo puede ser utilizado para fines personales y de acuerdo a la ley. Queda estrictamente prohibido:
-   Subarrendar el vehículo a terceros.
-   Utilizar el vehículo para carreras o competencias.
-   Transportar materiales peligrosos o ilegales.
-   Conducir bajo la influencia del alcohol o drogas.
> **Aviso Importante:** El incumplimiento de estas normas resultará en la terminación inmediata del contrato y la aplicación de penalizaciones económicas.
## 3. Devolución del Vehículo
El vehículo debe ser devuelto en la misma fecha, hora y lugar acordados en el contrato. Cualquier retraso puede generar cargos adicionales. El auto debe ser devuelto en las mismas condiciones en las que fue   entregado, con el tanque de combustible al mismo nivel.
Para cualquier duda o consulta, no dude en [contactarnos por correo](mailto:soporte@tu-pagina.com).'
WHERE 
  id = 1;

UPDATE site_content
SET 
  privacy_policy = 
'# Política de Privacidad
*Última actualización: 24 de agosto de 2025*
En nuestro servicio de renta de autos, su privacidad es nuestra prioridad. Esta política detalla cómo recopilamos, usamos y protegemos su información personal.
---
## 1. Información que Recopilamos
Para gestionar su alquiler, recopilamos los siguientes datos:
1.  **Datos de Identificación Personal:** Nombre completo, dirección, número de teléfono, correo electrónico y copia de su licencia de conducir.
2.  **Datos de Pago:** Información de su tarjeta de crédito o débito, necesaria para procesar el pago y el depósito de garantía.
3.  **Datos del Alquiler:** Fechas y lugares de recogida y devolución del vehículo.
4.  **Datos de Telemetría del Vehículo:** Podemos recopilar datos de ubicación (GPS) y de uso del vehículo (kilometraje, velocidad) por motivos de seguridad y gestión de la flota.
## 2. Uso de su Información
Utilizamos su información para los siguientes propósitos:
-   Procesar y confirmar su reservación.
-   Verificar su identidad y elegibilidad para alquilar.
-   Gestionar el cobro de los servicios y depósitos de garantía.
-   Brindarle soporte al cliente y asistencia en caso de emergencia.
-   Proteger nuestros activos y prevenir fraudes o abusos.
> **Transparencia:** Jamás venderemos su información personal a terceros para fines de marketing.
## 3. Seguridad de los Datos
Implementamos medidas de seguridad técnicas y organizativas para proteger su información contra el acceso no autorizado, la alteración o la destrucción. La información de pago se transmite de forma cifrada.
## 4. Sus Derechos
Usted tiene derecho a acceder, rectificar o solicitar la eliminación de sus datos personales.
Si tiene alguna pregunta sobre cómo manejamos su privacidad, por favor no dude en [contactarnos por correo](mailto:privacidad@tu-pagina.com).'
WHERE 
  id = 1;